import bluetooth
from picrawler import Picrawler
from robot_hat import TTS, Music, Ultrasonic
from luma.core.interface.serial import i2c
from luma.oled.device import ssd1306
from luma.core.render import canvas
import time
import math

# Initialize components
crawler = Picrawler()
tts = TTS()
music = Music()
sonar = Ultrasonic(Pin("D2"), Pin("D3"))

# OLED display setup
serial = i2c(port=1, address=0x3C)
oled = ssd1306(serial)

# Bluetooth MAC address of your phone
phone_mac_address = "20:20:08:59:27:13"

# Function to find the phone by signal using PyBluez
def find_phone_classic():
    try:
        devices = bluetooth.discover_devices(duration=8, lookup_names=True, flush_cache=True)
        print("Devices found:", devices)
        for addr, name in devices:
            print(f"Device: {name}, Address: {addr}")
            if addr.lower() == phone_mac_address.lower():
                print("Phone detected!")
                return addr
        print("Phone not detected.")
    except Exception as e:
        print(f"Bluetooth scanning error: {e}")
    return None

# Function to draw the circle and needle
def draw_needle(angle):
    with canvas(oled) as draw:
        center_x, center_y = 64, 32
        radius = 30
        # Draw circle
        draw.ellipse((center_x - radius, center_y - radius, center_x + radius, center_y + radius), outline="white")
        # Draw needle
        end_x = center_x + int(radius * math.cos(math.radians(angle)))
        end_y = center_y + int(radius * math.sin(math.radians(angle)))
        draw.line((center_x, center_y, end_x, end_y), fill="white")

# Function to calculate angle based on RSSI
def calculate_angle(rssi):
    max_rssi = -30  # Example value for strongest signal
    min_rssi = -90  # Example value for weakest signal
    angle = 180 * (rssi - min_rssi) / (max_rssi - min_rssi)
    return max(0, min(180, angle))

# Main function
def main():
    speed = 80
    while True:
        try:
            addr = find_phone_classic()
            if addr is not None:
                print("Phone detected! Moving towards it.")
                tts.say("Phone detected! Moving towards it.")
                # Assuming a fixed RSSI value for demonstration purposes
                rssi = -50  # Replace with actual RSSI value if available
                angle = calculate_angle(rssi)
                draw_needle(angle)
                crawler.do_action('forward', 1, speed)
            else:
                print("Phone not detected. Scanning...")
                tts.say("Phone not detected. Scanning...")
                crawler.do_action('turn left', 1, speed)
            
            # Obstacle avoidance
            distance = sonar.read()
            if distance > 0 and distance <= 15:
                print("Obstacle detected! Avoiding...")
                tts.say("Obstacle detected! Avoiding...")
                crawler.do_action('turn right', 1, speed)
                # Adjust needle direction during turn
                addr = find_phone_classic()
                if addr is not None:
                    rssi = -50  # Replace with actual RSSI value if available
                    angle = calculate_angle(rssi)
                    draw_needle(angle)
            else:
                crawler.do_action('forward', 1, speed)
            
        except Exception as e:
            print(f"An error occurred: {e}")
            tts.say("An error occurred.")
        time.sleep(2)

if __name__ == "__main__":
    main()
